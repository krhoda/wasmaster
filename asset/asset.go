// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/.babelrc
// data/Cargo.toml
// data/index.html
// data/index.js
// data/lib.rs
// data/webpack.config.js

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBabelrc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x2a\x28\x4a\x2d\x4e\x2d\x29\x56\xb2\x52\x88\x56\x2a\x4a\x4d\x4c\x2e\x51\xd2\x51\x50\x4a\xcd\x2b\x53\x8a\xd5\x01\x4b\xe7\x94\xa6\x67\xe6\x41\xa4\x8b\x2b\xf3\x4a\x12\x2b\x74\x53\x2a\xf3\x12\x73\x33\x93\x75\x33\x73\x0b\xf2\x8b\x4a\x94\x62\xb9\x6a\x01\x01\x00\x00\xff\xff\x92\xf8\xf7\xdb\x49\x00\x00\x00")

func dataBabelrcBytes() ([]byte, error) {
	return bindataRead(
		_dataBabelrc,
		"data/.babelrc",
	)
}

func dataBabelrc() (*asset, error) {
	bytes, err := dataBabelrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/.babelrc", size: 73, mode: os.FileMode(420), modTime: time.Unix(1581277789, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataCargoToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcc\x31\xcb\x83\x30\x10\x80\xe1\xfd\x7e\xc5\x79\xdf\xac\xf8\x75\x2c\x74\x10\x2a\x1d\x5a\xb1\x83\x5b\x08\x72\x26\x87\x84\x6a\x2a\x49\xda\xe2\xbf\x2f\xe9\xfc\xf2\x3e\x7f\x38\xf4\xe7\xfe\x88\x5d\x73\x6d\xb1\xc1\x4b\x8f\x43\xdb\xdd\x6f\xcd\xd0\x16\x05\xa8\x8d\xcd\x83\x67\xd1\xe0\x79\x15\x3c\x21\x05\x61\x93\xc6\xf0\x8a\x69\xfc\x70\x5c\x09\xde\x12\xa2\x7b\xfa\xdc\xfe\xab\xba\xaa\x09\x40\x2d\x6e\xd2\x60\x02\x27\x29\xd3\xbe\xe5\x4f\x91\xb1\xfb\xe2\x26\xd2\x00\xca\xca\x26\xde\x8a\x37\x4e\xa2\x86\xcc\x94\x93\xf3\x76\x96\x9f\x52\x57\x07\xfa\x06\x00\x00\xff\xff\x8f\x2e\x83\x3b\x95\x00\x00\x00")

func dataCargoTomlBytes() ([]byte, error) {
	return bindataRead(
		_dataCargoToml,
		"data/Cargo.toml",
	)
}

func dataCargoToml() (*asset, error) {
	bytes, err := dataCargoTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Cargo.toml", size: 149, mode: os.FileMode(420), modTime: time.Unix(1581277608, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8f\xc1\x6a\x85\x30\x10\x45\xd7\xfa\x15\xd3\xac\x9f\xcd\xb6\xd0\x89\x50\xfa\x07\x8f\x07\x5d\xc7\x64\x8a\x29\xd1\xd8\xe4\x46\xea\xdf\x17\xcd\x5b\x0d\xcc\x3d\x1c\xee\xe5\x17\x9f\x1c\x8e\x4d\x68\xc6\x12\xc7\x9e\xdb\xe9\x78\x16\xeb\xc7\xbe\xeb\x78\x11\x58\x72\x69\x85\xac\x30\x0a\xf2\x07\x7d\x32\xef\x6e\xb6\xb9\x08\x4c\xc5\xf7\xf0\xa6\x68\x06\xb6\x41\x7e\x6b\xd8\x8d\xfa\x6c\xf4\xf0\x38\x36\x51\xfa\xb2\x20\x20\xca\x78\x17\xeb\x70\xa3\x7b\x2d\xb8\x91\x5d\x3d\x7d\xc9\xf4\x51\x8a\x2c\x53\x3c\xe8\x51\x91\x72\xb0\x91\x75\x83\xfb\x8e\xf5\xb3\x05\x4f\xc9\x1f\x97\xc7\x87\x9d\x82\x37\x2a\xa7\x04\x35\xb2\xf6\x61\xbf\xfe\xc5\xe5\xb0\x81\x4a\x76\x46\xe9\xa9\xae\x3e\xca\xeb\x4f\x39\x89\x96\x5c\xb6\x66\x61\xdd\x36\xfe\x07\x00\x00\xff\xff\xdf\x0d\xc8\xb9\xfb\x00\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 251, mode: os.FileMode(420), modTime: time.Unix(1581277271, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataIndexJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\x41\x4b\xc4\x30\x10\x85\xcf\xc9\xaf\x18\x72\x4a\x41\x1b\xf6\xdc\xb4\xa0\xab\xa0\x07\x11\xf6\x0f\x94\xb6\x89\xdb\x60\x93\x29\xe9\x44\x91\xa5\xff\x5d\xd2\x2a\xbb\x97\xf0\x31\xef\xcd\xbc\x47\x9c\x9f\x31\x12\x9c\x6c\x37\x10\x7c\x44\xf4\x20\x62\x66\x51\xf1\x5b\xe9\xe9\xfd\xed\x56\xbd\x37\xe8\x45\xc5\xf9\x80\x61\x21\xf8\xee\x16\x0f\x35\xec\x7e\x29\xca\x52\xf5\xc9\x4d\x46\x6d\xd6\x36\xa6\x85\xda\x6c\x11\x45\xc5\x79\x86\x92\x46\x1b\xe4\xbe\xd5\xc0\x85\xb3\xfd\xcc\xc3\x3c\x43\x0d\xb2\xf8\x1b\xb2\x68\x29\xc5\x00\x92\x33\xc6\xb4\x71\x5f\x4d\x06\x00\x00\x3d\x1e\x9a\x17\x07\x34\xda\x68\xb5\x1a\x0f\x57\xa1\x4f\x44\x18\x00\xc3\x71\x72\xc3\x67\x7d\xd9\xd2\x7a\x77\x6e\x07\xf4\x73\xa2\x8e\x1c\x86\xb5\x39\xa5\x00\xc7\xeb\x40\xab\x7d\x6d\x3b\xa3\xd5\x96\xc4\x19\xcb\x6d\xd9\x9a\x9f\xff\x1f\x28\xa3\x0d\xc6\x46\xa9\x73\x53\xd5\xdc\x81\xc1\x21\x79\x1b\xa8\x3c\x5b\x7a\x9e\x6c\xc6\xc7\x9f\x57\x23\x45\x44\x24\x51\x14\x15\x5f\x8b\x8a\xff\x06\x00\x00\xff\xff\x20\x78\x23\x28\x63\x01\x00\x00")

func dataIndexJsBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexJs,
		"data/index.js",
	)
}

func dataIndexJs() (*asset, error) {
	bytes, err := dataIndexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.js", size: 355, mode: os.FileMode(420), modTime: time.Unix(1581277542, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataLibRs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x4d\x6a\x03\x31\x0c\x46\xf7\x3a\x85\xea\x40\x19\x97\x9e\xc0\xde\xb5\x37\xe8\x36\x04\xe3\xf1\x28\x83\x61\xfc\x83\x2c\xd1\x42\xc9\xdd\x4b\xc8\x14\xa6\x74\xfb\xbd\xa7\x87\x4e\x4f\xe7\x2b\x45\x51\xa6\xa9\x73\x4b\xa1\xc4\xc4\xed\x15\x3f\xe3\x28\x21\xe9\x90\x56\xc2\xa0\x24\xb9\xd5\x7d\xcc\xa5\x37\x96\x50\xda\xa2\x1b\xd9\x0b\x00\x7d\x09\x71\xc5\xc4\x51\xe8\xa1\xcc\xb9\x2e\x2b\x55\x0f\xa0\xe3\xef\xe4\x5c\x67\xda\x74\x21\xe7\x5e\x3c\xc0\xe9\x7c\x84\x97\xdf\x94\x79\x37\xf8\x0d\x88\x88\xd7\x8a\x71\x23\x96\x69\x38\x7c\x1e\xc2\xd6\x03\xdc\xfe\xdf\x75\x9d\xef\xea\x9c\xd7\x90\x5a\xe9\x2a\xf1\xfe\xf0\x64\xf7\xca\x23\x61\xde\xf2\x8a\x07\x8c\xb9\xe2\x87\x0e\x31\xd6\xc3\x0d\x7e\x02\x00\x00\xff\xff\xdc\xe1\x2a\x3a\x08\x01\x00\x00")

func dataLibRsBytes() ([]byte, error) {
	return bindataRead(
		_dataLibRs,
		"data/lib.rs",
	)
}

func dataLibRs() (*asset, error) {
	bytes, err := dataLibRsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/lib.rs", size: 264, mode: os.FileMode(420), modTime: time.Unix(1581277725, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataWebpackConfigJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\xc1\x6a\xb5\x30\x14\x84\xd7\x27\x4f\x71\x08\xff\x42\xc1\x5f\xf7\xb9\xdc\x27\x69\x8b\x78\xcd\x94\x2a\x31\xb1\x39\xc9\xc5\xd2\xfa\xee\x25\x2a\x74\x93\x30\xcc\xf0\xcd\x9c\x31\x78\x49\xbc\x0e\xe9\x83\xef\x1c\xf1\x99\xa7\x88\x4a\x17\xad\xeb\x9b\x52\x4b\xb0\xd9\xa1\xc5\xb6\x86\x98\x84\xef\xfc\xad\x08\x3e\xc5\x2f\xc3\xba\xed\x24\x8e\xdd\xe4\x2d\xb6\x76\x16\xdd\x28\x0a\x39\xad\x39\x99\x12\xa2\xf7\xc9\xc1\x0f\x0b\x0c\xeb\x47\xf6\xd6\xe1\xca\x50\x61\x9b\xa3\xb1\x8d\x90\xe0\x9e\xa8\xfa\xde\x4e\xb1\x84\x1b\xd6\x76\x92\xa4\x6b\xa5\x68\x6f\x14\x9d\xf5\x27\x30\x66\x07\x31\xfc\xa2\x88\xa8\x68\xa2\x04\x49\x86\xbb\xd7\xb6\x9a\xe5\x67\x96\xad\xfe\xd7\x35\x87\x81\x6d\x74\xd9\xc2\x70\xe7\x83\x45\x7f\x52\xe4\x32\xb3\x5c\x40\x22\x72\x61\xb0\x88\x65\xe2\xf0\x80\xfb\x7f\x4a\xad\x0e\x73\x3f\xbe\xe3\x7d\xfb\x9b\x53\xee\xb1\x78\xc2\x85\x75\x81\x4f\x5a\xed\x37\xf5\x1b\x00\x00\xff\xff\xfa\xcd\x33\x51\x44\x01\x00\x00")

func dataWebpackConfigJsBytes() ([]byte, error) {
	return bindataRead(
		_dataWebpackConfigJs,
		"data/webpack.config.js",
	)
}

func dataWebpackConfigJs() (*asset, error) {
	bytes, err := dataWebpackConfigJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/webpack.config.js", size: 324, mode: os.FileMode(420), modTime: time.Unix(1581277829, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/.babelrc":          dataBabelrc,
	"data/Cargo.toml":        dataCargoToml,
	"data/index.html":        dataIndexHtml,
	"data/index.js":          dataIndexJs,
	"data/lib.rs":            dataLibRs,
	"data/webpack.config.js": dataWebpackConfigJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		".babelrc":          &bintree{dataBabelrc, map[string]*bintree{}},
		"Cargo.toml":        &bintree{dataCargoToml, map[string]*bintree{}},
		"index.html":        &bintree{dataIndexHtml, map[string]*bintree{}},
		"index.js":          &bintree{dataIndexJs, map[string]*bintree{}},
		"lib.rs":            &bintree{dataLibRs, map[string]*bintree{}},
		"webpack.config.js": &bintree{dataWebpackConfigJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
