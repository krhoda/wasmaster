// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/.babelrc
// data/Cargo.toml
// data/index.html
// data/index.js
// data/lib.rs
// data/wasm.worker.js
// data/webpack.config.js
package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBabelrc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x2a\x28\x4a\x2d\x4e\x2d\x29\x56\xb2\x52\x88\x56\x72\x48\x4a\x4c\x4a\xcd\xd1\x2f\x4a\x4d\x4c\x2e\x51\xd2\x51\x80\xf1\x53\xf3\xca\x94\x62\xb9\x6a\x01\x01\x00\x00\xff\xff\x6a\x61\x32\x37\x2f\x00\x00\x00")

func dataBabelrcBytes() ([]byte, error) {
	return bindataRead(
		_dataBabelrc,
		"data/.babelrc",
	)
}

func dataBabelrc() (*asset, error) {
	bytes, err := dataBabelrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/.babelrc", size: 47, mode: os.FileMode(420), modTime: time.Unix(1581383039, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataCargoToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcc\x31\xcb\x83\x30\x10\x80\xe1\xfd\x7e\xc5\x79\xdf\xac\xf8\x75\x2c\x74\x10\x2a\x1d\x5a\xb1\x83\x5b\x08\x72\x26\x87\x84\x6a\x2a\x49\xda\xe2\xbf\x2f\xe9\xfc\xf2\x3e\x7f\x38\xf4\xe7\xfe\x88\x5d\x73\x6d\xb1\xc1\x4b\x8f\x43\xdb\xdd\x6f\xcd\xd0\x16\x05\xa8\x8d\xcd\x83\x67\xd1\xe0\x79\x15\x3c\x21\x05\x61\x93\xc6\xf0\x8a\x69\xfc\x70\x5c\x09\xde\x12\xa2\x7b\xfa\xdc\xfe\xab\xba\xaa\x09\x40\x2d\x6e\xd2\x60\x02\x27\x29\xd3\xbe\xe5\x4f\x91\xb1\xfb\xe2\x26\xd2\x00\xca\xca\x26\xde\x8a\x37\x4e\xa2\x86\xcc\x94\x93\xf3\x76\x96\x9f\x52\x57\x07\xfa\x06\x00\x00\xff\xff\x8f\x2e\x83\x3b\x95\x00\x00\x00")

func dataCargoTomlBytes() ([]byte, error) {
	return bindataRead(
		_dataCargoToml,
		"data/Cargo.toml",
	)
}

func dataCargoToml() (*asset, error) {
	bytes, err := dataCargoTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Cargo.toml", size: 149, mode: os.FileMode(420), modTime: time.Unix(1581277608, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\x41\x4f\xc3\x20\x14\xc7\xcf\xdd\xa7\x60\x5c\xa6\x87\x96\xab\x89\x8f\x26\x53\x97\x78\xd0\x98\xb8\x25\x3b\x77\xf0\x4c\x99\x2d\x54\x78\x2d\xf6\xdb\x1b\x8a\x59\x7a\x82\x97\xff\xef\xff\x83\x3c\xd8\x6a\xa7\x68\x1e\x90\xb5\xd4\x77\xf5\x06\xf2\x51\x40\x8b\x8d\xae\x37\x45\x01\x3d\x52\xc3\x94\xb3\x84\x96\x24\x27\xfc\x25\x91\x98\x47\xd5\x36\x3e\x20\xc9\x91\xbe\xca\x07\xce\x5a\xa2\xa1\xc4\x9f\xd1\x4c\x92\x3f\x67\xba\x3c\xcd\x03\x72\xb1\x58\xc8\x50\x87\xf5\xd3\xe1\xf5\xe3\xed\x85\x9d\xf7\xc7\xf7\xfd\xf1\x74\xf8\xdc\x82\xc8\x41\x42\x82\xf2\x66\xa0\x74\x2d\xa2\xb1\xda\xc5\x2a\x36\xa1\x3f\x3b\xff\x8d\x9e\x49\x66\x31\xb2\x3c\xdc\xed\x52\x50\xc5\x65\xa8\xae\x61\x77\x9f\xea\xe2\xd6\x07\xf1\xff\x79\xb8\x38\x3d\x2f\x6e\x6d\x26\x66\xb4\xe4\xde\x39\xe2\x35\x08\x6d\xa6\xd5\x9b\x2c\x78\x25\xb9\xb8\x8c\x56\x77\x58\x5d\x43\x22\x56\xb6\x6c\x01\x91\x57\xf3\x17\x00\x00\xff\xff\x71\xee\xf2\xa7\x32\x01\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 306, mode: os.FileMode(420), modTime: time.Unix(1581383288, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataIndexJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xc1\x6e\xab\x48\x10\x3c\x33\x5f\xd1\xe1\x02\x44\x0e\x56\xae\x06\x1c\x39\x36\x91\x2d\x25\xeb\x95\xed\xc8\x87\x28\x5a\xb1\x4c\xdb\x46\x01\x06\x0d\x43\xa2\x08\xf1\xef\xab\x1e\x88\xc1\xd9\xbc\x27\xbd\x1b\x34\xd5\x35\xd5\x5d\xc5\x24\x59\x21\xa4\x82\x0d\x46\xb1\x1a\x41\x5d\x95\x18\x1e\x0e\x48\xcf\x55\x89\x1b\xe4\x55\x8c\xb2\x81\x83\x14\x19\x98\x92\x40\xa6\xc7\x86\x3d\x8b\xf5\xd3\xf0\xeb\x0d\x17\x99\xe9\x31\x16\x8b\xbc\x54\xf0\x11\x95\xd9\x5e\xc8\x37\x94\x10\xc0\x47\x92\x73\xf1\xe1\xf6\xb5\x33\x8c\x8b\xad\xc8\x70\x1f\x95\x19\x04\x60\x3b\x10\x4c\xa1\x66\x46\x0f\x74\x0b\x51\xaa\x27\x2c\xcb\xe8\x88\x76\x6d\x45\xb1\x4a\x44\x6e\x4d\xc0\xe2\xe2\x1f\x42\x59\x8d\xe3\xb1\xe6\x8b\x6d\x56\x14\x43\x9a\x5e\x49\x37\x0d\x7d\x2c\x55\xa4\x70\x04\x2d\xd3\x17\x52\x43\x45\x8a\x6e\x2a\x8e\xb6\x79\x77\x77\x67\x3a\xdf\x8a\x97\x6d\x1e\x33\x8c\xe4\x00\x76\xfb\xea\xaa\xcf\x02\x21\x08\x02\xb0\x92\x3c\x51\x96\xa3\x29\x2f\xda\x2d\xdd\x0f\x49\x09\x4a\x56\x68\x69\x02\x43\xa2\xaa\x64\xae\x2b\xf4\xde\x30\xa3\xf1\x18\x33\x52\x54\xf0\x42\xaa\x1f\x45\xc4\x91\x8f\xf4\x04\x8b\xa4\x2c\x22\x15\x9f\x5e\x21\x18\xd8\x63\x0f\x86\x1b\xc1\x21\x4a\x4b\x24\xea\x8b\x93\xf7\xb3\xed\x13\x3c\xae\x67\x8b\x70\x01\xb0\xda\xd2\xd9\x97\x88\xfe\x28\x87\x31\xe3\x1c\x03\xdb\xfe\x79\x3b\xab\x1c\x9e\xb7\x21\x84\x0f\x0f\xe1\x7c\x67\xea\x49\x06\x7e\x89\x3c\x6b\xdd\xa2\x5d\xe3\x99\xe1\xff\x14\x2b\xd8\x2d\x37\xe1\x6c\x01\x37\x37\xb0\x0c\x67\x9b\xc5\xa4\xe5\xba\x40\xa2\x16\x6b\xe8\x95\xd4\x3c\x52\x51\x03\x01\xe8\x65\xe9\xf5\x5f\x51\xa9\xdb\xf6\xb9\x0f\xa5\x14\xd2\xb6\xe6\xa2\x4a\x39\xe4\x42\xc1\x21\xc9\x39\x10\x12\x92\x1c\x7a\x7d\xf8\x8e\xb9\xba\xea\xac\xf8\xd6\x8d\x5d\xb5\x75\x88\x1e\x9b\x5e\x47\x6b\x3a\x29\x21\xd2\x56\xe0\x6f\xc7\x9b\xdd\xaf\x9f\x77\xb0\x5b\xc3\x62\xb5\xfd\x7b\xb6\x9b\x2f\x7f\x1a\xf5\x9c\x2c\xfa\x30\x74\xdc\xae\x29\x5e\x93\x2e\x7a\x8d\xa3\x01\xe3\x6b\xf8\xb3\x9f\x04\xae\xc7\xac\x9b\xe2\x17\x8d\x44\xdb\x6e\x72\xc0\xa0\xf3\x3c\x6a\xab\x45\xf4\x99\x8a\x88\x5b\x13\xa8\x9b\x76\x25\x86\x41\x73\x34\x23\x78\x79\x75\xba\xe0\xa6\x3a\x48\x10\x80\x5f\x4c\x29\x54\x49\x7e\x74\x5d\xd7\x1f\x17\x53\x8f\x69\xcf\x06\x69\xd3\xc6\xf5\x0d\xff\x56\x4a\x09\x72\x68\x9e\x26\xf1\x5b\x50\xf7\x77\x43\x33\xd5\x21\xfe\x6b\xbd\xbf\xf2\xc7\x2d\x8c\xe8\x68\x9a\xee\x1f\x22\xf5\x3e\x4f\xde\xa7\x24\xcc\x3f\xdd\x4e\x97\x09\xa8\x13\x4a\xf4\xc7\xa7\x5b\x5d\xac\xdb\x83\x48\xb4\x3f\x6e\x91\x74\x75\x78\x8c\x7d\x5d\x66\xae\xc4\x9c\xa3\xb4\x7d\xba\x46\xc6\xd3\x11\x70\x11\x57\x19\xe6\xca\x3d\xa2\x0a\x53\xa4\xc7\xfb\xcf\x15\xb7\x4d\x29\x84\x32\x1d\xc7\x63\xff\x05\x00\x00\xff\xff\x48\x26\x50\x7d\x43\x05\x00\x00")

func dataIndexJsBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexJs,
		"data/index.js",
	)
}

func dataIndexJs() (*asset, error) {
	bytes, err := dataIndexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.js", size: 1347, mode: os.FileMode(420), modTime: time.Unix(1581384363, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataLibRs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\x41\x0a\xc2\x30\x10\x45\xf7\x73\x8a\x21\x82\xb4\x1e\x21\xc5\x8d\xde\xc0\xad\x94\x92\xa6\x63\x88\xb4\x93\x90\x49\x50\x10\xef\x2e\x2d\x5d\xb4\xb8\x9d\xff\xe6\x3d\x7a\x67\x4a\x8c\x36\x99\x4c\xf8\x32\x32\x75\xbd\xe7\xc1\x11\x37\x00\x45\xf6\x27\xad\x63\xa2\xb1\x0c\xa4\xf5\xa9\x01\x38\xdc\xb7\x63\x0b\xab\x4a\x5d\x15\x7e\x00\x11\x71\x0f\x54\x4f\xe9\xd8\x4c\x24\xd1\x58\xc2\x33\xda\xc0\x12\x46\xaa\xdb\x85\x7d\x30\x8e\xc1\x55\xa2\xf1\x28\x39\xd5\x0d\x7c\xff\x03\xb1\xf4\x33\xd7\x7b\xd7\xd9\x30\xc5\x92\x4d\xf6\x81\xab\x7a\xcd\xcd\xff\xea\xe2\x1d\x6e\x46\xf4\x8c\xb7\x22\x59\x2d\xc6\x5f\x00\x00\x00\xff\xff\xe0\xa2\x60\x5d\xed\x00\x00\x00")

func dataLibRsBytes() ([]byte, error) {
	return bindataRead(
		_dataLibRs,
		"data/lib.rs",
	)
}

func dataLibRs() (*asset, error) {
	bytes, err := dataLibRsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/lib.rs", size: 237, mode: os.FileMode(420), modTime: time.Unix(1581384371, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataWasmWorkerJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x92\xdd\x6a\xe3\x30\x10\x85\xaf\xa5\xa7\x98\x94\xa5\x96\x61\xeb\xde\x3b\x64\x21\xdd\x18\x52\xba\xd9\x2c\x6e\x4a\x2f\x53\x59\x9e\xb8\xda\x3a\x52\x90\x64\x42\x09\x7e\xf7\x45\xfe\xab\x9d\xbd\xf2\x8f\xe6\x7c\x47\x73\x66\xee\xef\x61\xb7\x5d\x6d\x63\xd8\x2c\x9f\x12\xd8\x25\x9b\x3f\xbf\x96\xbb\x84\xca\xe3\x49\x1b\xf7\x2c\x8c\x3c\x39\xcb\x02\x83\x5c\xb8\xbd\xa9\xac\xdb\x9f\xb9\x3d\x46\x7f\x6d\x10\xce\x29\x2d\xd1\x81\x41\x9e\x7f\xc2\x02\x0e\xbc\xb4\x38\xa7\x54\x68\x65\x1d\x94\x9a\xe7\x0f\x52\xe5\x05\x2a\x58\x00\x13\x59\x08\x8b\x1f\x70\xa1\xc4\xcb\xf7\x59\x7b\xf2\x1f\x77\x9f\x15\x91\x7f\x06\x61\xe4\xde\x51\x31\xd6\xab\x88\xa7\xea\x12\xa3\x52\x17\x2c\x78\xfc\x0d\xaf\xdb\xf4\x29\x49\x61\xb7\x4e\x93\xe5\x0a\xf8\xc1\xa1\x81\xd7\xe5\xf3\x26\xf6\xf7\x22\xa4\xbf\x94\x33\x15\xfa\x6f\x91\x31\xff\xbf\x0e\x23\xc1\x9d\x78\x67\x3d\x0e\x8d\xd1\x26\x9c\xd3\xba\xbf\xb7\x45\x95\xa7\x9d\x78\x70\x3f\x69\xeb\x36\x68\x2d\x2f\x90\x5d\xb8\x70\x52\xab\x18\x02\xa9\xa4\x0b\xbe\xc3\x89\x7f\xfa\x66\x63\xb8\x34\xa6\x71\x1b\x48\x5d\x7b\xea\x10\x47\xae\x1f\x64\xf1\x53\x1f\x4f\x95\xe3\x5e\x3e\xa6\x8f\x13\x89\x32\x59\xec\xc5\x57\x1d\xeb\x28\x5a\x1d\x5b\x7f\x2f\xc4\x5e\x39\x0e\xe5\xe6\x51\x5d\x85\x72\x77\x07\xeb\x64\x99\xae\xe2\x1b\xdf\xfa\xb8\x16\xfd\xec\x88\x3c\x00\x9b\xb5\x41\xdd\xde\x02\x46\x39\x77\x3c\x6a\xbb\x83\xd9\x62\xd1\x35\x18\x36\xf1\x0f\x5b\x92\xa4\x29\x6c\x5f\x76\xb0\x4e\xd2\x24\xa2\xa4\xa6\x94\xd8\xb3\xf4\x91\x4e\x00\xad\x4a\x70\x8b\x1d\x26\xa6\x84\x34\x8e\x8d\x61\x7b\x4c\xc8\x90\x76\x33\x1d\x42\x48\x66\x90\x7f\x34\xaf\x9e\x4c\xc8\x68\x8d\xd8\x50\xdc\xd6\x76\xa5\x83\x4d\xae\x9b\x15\xfa\x72\x9a\x4d\xac\x0c\xba\xca\xa8\x11\xfa\x7a\x24\xec\x1a\x9b\xe3\x81\x57\xa5\x6b\x78\x93\x7d\x61\x6f\x2f\xea\x43\xe9\xb3\x82\x7e\x17\xbe\x5d\x26\xdd\xd7\x6f\x13\x16\xa9\x69\x4d\xff\x05\x00\x00\xff\xff\xde\x35\x19\xd3\x68\x03\x00\x00")

func dataWasmWorkerJsBytes() ([]byte, error) {
	return bindataRead(
		_dataWasmWorkerJs,
		"data/wasm.worker.js",
	)
}

func dataWasmWorkerJs() (*asset, error) {
	bytes, err := dataWasmWorkerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/wasm.worker.js", size: 872, mode: os.FileMode(420), modTime: time.Unix(1581383364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataWebpackConfigJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\xc1\x4a\x03\x31\x10\x86\xcf\x93\xa7\x18\x82\xd0\x2e\xac\x9b\x82\xb7\x94\x1e\x14\xef\x15\xf5\xa6\x52\xb6\xcd\x88\xbb\xa4\xc9\x9a\x49\x96\x15\xed\xbb\x4b\x36\x2b\x78\x09\xfc\xfc\xe1\xfb\x66\xe6\xe4\x1d\x47\x1c\xda\xf8\x81\x3b\x0c\xf4\x99\xba\x40\x6b\x99\xb3\xac\xb6\x42\x9c\xbd\x49\x96\x1a\x9a\x06\x1f\x22\xe3\x0e\xbf\x05\x18\x1a\x9f\x28\x8c\x14\x74\x4e\x70\xf2\x2e\x92\x8b\x77\x2d\x93\x9e\x41\x4d\xef\x3b\xb7\x3e\x1c\x4c\x17\x5c\x7b\xa6\x1a\x57\xa6\xe3\xb8\xaa\x6a\x01\x90\x31\x1a\x6f\x36\x9b\x8d\x80\x4b\x2d\x80\x5c\x0c\x5f\x1a\x65\xa3\x7a\x56\x9d\x33\x34\x35\x3d\xcb\x5a\x80\x4f\x71\x48\xb1\x18\xde\x3b\x4b\x99\xa4\x51\x1e\x93\x33\x96\x96\x3f\x90\x6d\x8b\x33\x10\x7b\x3b\xd2\x7f\xad\xcc\x5a\x59\x15\x51\x59\xa4\xf0\x42\xb2\xc4\x1a\x5f\x04\x00\xe4\x0c\x10\x89\xa3\x46\xf5\xda\xac\x7b\xfe\xe9\x79\xaa\xae\x54\x3d\x17\x34\x9d\x6c\x32\xa4\x51\x39\x6f\xe8\x50\x28\xbc\x94\x89\x17\x20\x00\x58\xdf\x9a\x7c\x11\x79\x6c\x8f\x64\xaf\x4b\x94\x73\x77\x11\xe2\xef\x7d\x13\x65\x1a\xa5\xf0\x79\x7f\xbf\xd7\x78\x6b\x0c\x3e\x04\x6f\xf0\x31\x73\x9b\x79\xce\xbc\xa7\xa1\x91\xac\x1f\xce\xe4\xa2\x14\x97\xad\xf8\x0d\x00\x00\xff\xff\xd0\x0f\xab\x27\xa7\x01\x00\x00")

func dataWebpackConfigJsBytes() ([]byte, error) {
	return bindataRead(
		_dataWebpackConfigJs,
		"data/webpack.config.js",
	)
}

func dataWebpackConfigJs() (*asset, error) {
	bytes, err := dataWebpackConfigJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/webpack.config.js", size: 423, mode: os.FileMode(420), modTime: time.Unix(1581398944, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/.babelrc":          dataBabelrc,
	"data/Cargo.toml":        dataCargoToml,
	"data/index.html":        dataIndexHtml,
	"data/index.js":          dataIndexJs,
	"data/lib.rs":            dataLibRs,
	"data/wasm.worker.js":    dataWasmWorkerJs,
	"data/webpack.config.js": dataWebpackConfigJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		".babelrc":          &bintree{dataBabelrc, map[string]*bintree{}},
		"Cargo.toml":        &bintree{dataCargoToml, map[string]*bintree{}},
		"index.html":        &bintree{dataIndexHtml, map[string]*bintree{}},
		"index.js":          &bintree{dataIndexJs, map[string]*bintree{}},
		"lib.rs":            &bintree{dataLibRs, map[string]*bintree{}},
		"wasm.worker.js":    &bintree{dataWasmWorkerJs, map[string]*bintree{}},
		"webpack.config.js": &bintree{dataWebpackConfigJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
